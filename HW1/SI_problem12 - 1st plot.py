# -*- coding: utf-8 -*-
"""SI.p12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zWuvRtg2dusuJIhMxiDsV-vjCmgLnYp
"""

import random
import math
import matplotlib.pyplot as plt

def estimate_pi(num_samples):
    inside_circle = 0

    x_inside = []
    y_inside = []
    x_outside = []
    y_outside = []

    for _ in range(num_samples):
        x = random.uniform(0, 1)
        y = random.uniform(0, 1)
        distance = math.sqrt(x**2 + y**2)

        if distance <= 1:
            inside_circle += 1
            x_inside.append(x)
            y_inside.append(y)
        else:
            x_outside.append(x)
            y_outside.append(y)

    pi_estimate = 4 * (inside_circle / num_samples)
    return pi_estimate, x_inside, y_inside, x_outside, y_outside

actual_pi = math.pi

if __name__ == "__main__":
    num_samples = int(input("Enter the number of samples: "))
    estimated_pi = estimate_pi(num_samples)

pi_estimate, x_inside, y_inside, x_outside, y_outside = estimate_pi(num_samples)

print("Estimated Pi:", pi_estimate)
print("Actual Pi:", actual_pi)
print("Difference:", abs(actual_pi - pi_estimate))

# Create a plot
plt.figure(figsize=(8, 8))
plt.scatter(x_inside, y_inside, color='Peru', marker='.')
plt.scatter(x_outside, y_outside, color='Olive', marker='.')
plt.title(f"Monte Carlo Estimation of Pi (Sample Size: {num_samples})")
plt.legend(["Inside Circle", "Outside Circle"])
plt.gca().set_aspect('equal', adjustable='box')
plt.show()
