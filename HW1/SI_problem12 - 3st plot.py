# -*- coding: utf-8 -*-
"""SI.p12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zWuvRtg2dusuJIhMxiDsV-vjCmgLnYp
"""



import random
import math
import matplotlib.pyplot as plt

def estimate_pi(N):
    points_inside_circle = 0

    for _ in range(N):
        x = random.uniform(0, 1)
        y = random.uniform(0, 1)
        distance = x**2 + y**2

        if distance <= 1:
            points_inside_circle += 1

    estimated_pi = 4 * points_inside_circle / N
    return estimated_pi

# Actual value of pi
actual_pi = math.pi

# Test different values of N
N_values = [10, 100, 1000, 10000, 100000, 1000000]
differences = []

for N in N_values:
    estimated_pi = estimate_pi(N)
    difference = abs(estimated_pi - actual_pi)
    differences.append(difference)

# Create a log-log plot
plt.loglog(N_values, differences, marker='o')
plt.xlabel("Number of Points (N)")
plt.ylabel("Absolute Difference from Actual Pi")
plt.title("Convergence of Monte Carlo Pi Estimation")
plt.grid(True)
plt.show()
