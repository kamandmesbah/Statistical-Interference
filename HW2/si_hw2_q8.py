# -*- coding: utf-8 -*-
"""SI_HW2_Q8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zVEc_Ajl1_U3vQEz6EF4h0aRoknmcI5
"""

# The logic and method will remain the same for R and Python

import numpy as np

def estimate_pi(n):
    x = np.random.uniform(0, 1, n)
    y = np.random.uniform(0, 1, n)
    inside_circle = (x**2 + y**2) < 1
    return 4 * np.sum(inside_circle) / n

# Estimating Ï€ for n = 10, 10000, 10000000
estimate_10 = estimate_pi(10)
estimate_10000 = estimate_pi(10000)
estimate_10000000 = estimate_pi(10000000)

estimate_10, estimate_10000, estimate_10000000

def estimate_area_ellipse(a, b, n):
    # Generating random points within the bounding box
    x = np.random.uniform(-a, a, n)
    y = np.random.uniform(-b, b, n)

    # Checking if points are inside the ellipse
    inside_ellipse = (x**2 / a**2 + y**2 / b**2) <= 1

    # Area of the bounding box
    area_box = 4 * a * b

    # Estimating the area of the ellipse
    area_ellipse = np.sum(inside_ellipse) / n * area_box
    return area_ellipse

# Parameters for the ellipse
a = 3
b = 2
n = 100000

# Estimating the area of the ellipse
estimated_area = estimate_area_ellipse(a, b, n)
estimated_area

def estimate_area_triangle(a, b, n):
    # Generating random points within the bounding box
    x = np.random.uniform(0, a, n)
    y = np.random.uniform(0, b, n)

    # Checking if points are inside the triangle
    inside_triangle = y <= (b / a) * x

    # Area of the bounding box
    area_box = a * b

    # Estimating the area of the triangle
    area_triangle = np.sum(inside_triangle) / n * area_box
    return area_triangle

# Parameters for the triangle
a_triangle = 4
b_triangle = 3
n_triangle = 100000

# Estimating the area of the triangle
estimated_area_triangle = estimate_area_triangle(a_triangle, b_triangle, n_triangle)
estimated_area_triangle