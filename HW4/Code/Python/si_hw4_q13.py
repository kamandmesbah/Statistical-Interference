# -*- coding: utf-8 -*-
"""SI_HW4_Q13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZLi3tJS87SlO4Lghfsu4Qs1MbQvKN6v
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the dataset
file_path = '/content/prostate_analysis_results (2).csv'
data = pd.read_csv(file_path,index_col=0)

data

data.describe()

"""# part 1"""

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import pandas as pd

# Assume 'data' is your DataFrame
# Select the relevant columns
scaler = StandardScaler()
data[['age', 'lpsa']] = scaler.fit_transform(data[['age', 'lpsa']])

X = data[['age', 'lpsa']]
y = data['lweight']

# Initialize the StandardScaler and fit it on the features


# Initialize the Linear Regression model
model = LinearRegression()

# Fit the model on the normalized features
model.fit(X, y)

# Coefficients and intercept
coefficients = model.coef_
intercept = model.intercept_

coefficients, intercept



import statsmodels.api as sm

# Add a constant term for the intercept
X = sm.add_constant(data[['age', 'lpsa']])

# Initialize and fit the model
model = sm.OLS(data['lweight'], X).fit()

# Get the summary
summary = model.summary()
print(summary)



import statsmodels.api as sm
import matplotlib.pyplot as plt

# Define the explanatory variables and response variable
X_age = sm.add_constant(data['age'])  # Age with constant added for intercept
X_lpsa = sm.add_constant(data['lpsa'])  # lpsa with constant added for intercept
Y = data['lweight']

# Fit the linear regression models
model_age = sm.OLS(Y, X_age).fit()
model_lpsa = sm.OLS(Y, X_lpsa).fit()

# Calculate the residuals
residuals_age = model_age.resid
residuals_lpsa = model_lpsa.resid

# Plotting
fig, axes = plt.subplots(1, 2, figsize=(15, 5))

# Scatter plot for age
axes[0].scatter(data['age'], residuals_age)
axes[0].axhline(y=0, color='r', linestyle='--')
axes[0].set_xlabel('Age')
axes[0].set_ylabel('Residuals')
axes[0].set_title('Residuals vs Age')

# Scatter plot for lpsa
axes[1].scatter(data['lpsa'], residuals_lpsa)
axes[1].axhline(y=0, color='r', linestyle='--')
axes[1].set_xlabel('lpsa')
axes[1].set_ylabel('Residuals')
axes[1].set_title('Residuals vs lpsa')

plt.tight_layout()
plt.show()



import statsmodels.api as sm

# Add a constant term for the intercept
X = sm.add_constant(data[['age']])

# Initialize and fit the model
model = sm.OLS(data['lweight'], X).fit()

# Get the summary
summary = model.summary()
print(summary)

import statsmodels.api as sm

# Add a constant term for the intercept
X = sm.add_constant(data[['lpsa']])

# Initialize and fit the model
model = sm.OLS(data['lweight'], X).fit()

# Get the summary
summary = model.summary()
print(summary)


# Plotting the scatter plots with least-squares fit line for each explanatory variable

fig, axes = plt.subplots(1, 2, figsize=(15, 5))

# Scatter plot and least-squares fit for age
axes[0].scatter(data['age'], Y, color='blue', label='Data points')
axes[0].plot(data['age'], model_age.predict(X_age), color='red', linestyle='--', label='Least-squares fit')
axes[0].set_xlabel('Age')
axes[0].set_ylabel('lweight')
axes[0].set_title('Scatter plot of lweight vs Age')
axes[0].legend()

# Scatter plot and least-squares fit for lpsa
axes[1].scatter(data['lpsa'], Y, color='blue', label='Data points')
axes[1].plot(data['lpsa'], model_lpsa.predict(X_lpsa), color='red', linestyle='--', label='Least-squares fit')
axes[1].set_xlabel('lpsa')
axes[1].set_ylabel('lweight')
axes[1].set_title('Scatter plot of lweight vs lpsa')
axes[1].legend()

plt.tight_layout()
plt.show()





"""# Part 3

# Part 4
"""

import pandas as pd

import pandas as pd

# Load the dataset

data = pd.read_csv('/content/prostate_analysis_results (2).csv',index_col=0)

# Choose a random sample of 50 data points from the dataset
sample = data.sample(50)



# Display the first few rows of the sample
print(sample.head())

# Select a random sample of 50 data points
sample_data = data.sample(50)

# Selecting the columns of interest
columns_of_interest = ['lweight', 'age', 'lpsa']
sample_data = sample_data[columns_of_interest]

# Normalize the data
scaler = StandardScaler()
sample_data_normalized = pd.DataFrame(scaler.fit_transform(sample_data), columns=columns_of_interest)

# Split the data into training and testing sets (90% train, 10% test)
train_data, test_data = train_test_split(sample_data_normalized, test_size=0.1, random_state=1)

train_data.head()

from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from scipy import stats

# Prepare data for the first model (age as explanatory variable)
X_train_age = train_data[['age']]
y_train = train_data['lweight']
X_test_age = test_data[['age']]
y_test = test_data['lweight']

# Build the linear regression model
model_age = LinearRegression().fit(X_train_age, y_train)

# Add a constant to the predictor variable set for the statsmodels
X_train_age_with_const = sm.add_constant(X_train_age)

# Fit the model using statsmodels to get the summary for hypothesis testing and confidence intervals
model_age_sm = sm.OLS(y_train, X_train_age_with_const).fit()

# Summary of the model to get p-value and confidence intervals
summary_age = model_age_sm.summary()
print(summary_age)

# Prepare data for the second model (lpsa as explanatory variable)
X_train_lpsa = train_data[['lpsa']]
X_test_lpsa = test_data[['lpsa']]

# Build the linear regression model
model_lpsa = LinearRegression().fit(X_train_lpsa, y_train)

# Add a constant to the predictor variable set for the statsmodels
X_train_lpsa_with_const = sm.add_constant(X_train_lpsa)

# Fit the model using statsmodels to get the summary for hypothesis testing and confidence intervals
model_lpsa_sm = sm.OLS(y_train, X_train_lpsa_with_const).fit()

# Summary of the model to get p-value and confidence intervals
summary_lpsa = model_lpsa_sm.summary()
print(summary_lpsa)

from sklearn.metrics import r2_score, mean_squared_error

# Predict using the model with 'age' as the explanatory variable
y_pred_age = model_age.predict(X_test_age)

# Calculate R-squared and Mean Squared Error for the model with 'age'
r2_age = r2_score(y_test, y_pred_age)
mse_age = mean_squared_error(y_test, y_pred_age)

# Predict using the model with 'lpsa' as the explanatory variable
y_pred_lpsa = model_lpsa.predict(X_test_lpsa)

# Calculate R-squared and Mean Squared Error for the model with 'lpsa'
r2_lpsa = r2_score(y_test, y_pred_lpsa)
mse_lpsa = mean_squared_error(y_test, y_pred_lpsa)

(r2_age, mse_age), (r2_lpsa, mse_lpsa)

# Define a range for successful prediction
range = 0.2

# Calculate success rate for the model with 'age'
success_rate_age = sum(abs(y_test - y_pred_age) <= range) / len(y_test)

# Calculate success rate for the model with 'lpsa'
success_rate_lpsa = sum(abs(y_test - y_pred_lpsa) <= range) / len(y_test)

(success_rate_age, success_rate_lpsa)